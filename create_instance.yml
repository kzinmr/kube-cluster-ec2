- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    key_name: my_aws_key
    region: us-west-2
    sec_group_master: kubernetes-master-node
    sec_group_worker: kubernetes-worker-node
    id_master: master
    id_worker: k8s-worker
    image: ami-0d1cd67c26f5fca19
    instance_type: t2.medium
    vpc_subnet: subnet-967099ee
    hosts_path: hosts

  tasks:
    - name: Facts
      ec2_instance_info:
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        region: "{{ region }}"
      tags: always

    - name: Provisioning EC2 instances
      block:

      - name: Upload public key to AWS
        ec2_key:
          name: "{{ key_name }}"
          key_material: "{{ lookup('file', key_path ) }}"
          vars:
            key_path: "{{ lookup('env', 'HOME') }}/.ssh/{{ key_name }}.pub"
          region: "{{ region }}"
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"

      - name: Create security group for master node
        ec2_group:
          name: "{{ sec_group_master }}"
          description: "Sec group for control-plane nodes"
          # vpc_id: 12345
          region: "{{ region }}"
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          rules:
            - proto: tcp
              ports: 22
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on ssh port

            - proto: tcp
              ports: 6443
              cidr_ip: 0.0.0.0/0
              rule_desc: Kubernetes API server

            - proto: tcp
              from_port: 2379
              to_port: 2380
              cidr_ip: 0.0.0.0/0
              rule_desc: etcd server client API

            - proto: tcp
              ports: 10250
              cidr_ip: 0.0.0.0/0
              rule_desc: Kubelet API

            - proto: tcp
              ports: 10251
              cidr_ip: 0.0.0.0/0
              rule_desc: kube-scheduler

            - proto: tcp
              ports: 10252
              cidr_ip: 0.0.0.0/0
              rule_desc: kube-controller-manager

        register: result_sec_group_master

      - name: Create security group for woker node
        ec2_group:
          name: "{{ sec_group_worker }}"
          description: "Sec group for control-plane nodes"
          # vpc_id: 12345
          region: "{{ region }}"
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          rules:
            - proto: tcp
              ports: 22
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on ssh port

            - proto: tcp
              from_port: 30000
              to_port: 32767
              cidr_ip: 0.0.0.0/0
              rule_desc: NodePort Services

            - proto: tcp
              ports: 10250
              cidr_ip: 0.0.0.0/0
              rule_desc: Kubelet API

        register: result_sec_group_worker

      - name: Provision master instance
        ec2:
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          key_name: "{{ key_name }}"
          group_id: "{{ result_sec_group_master.group_id }}"
          image: "{{ image }}"
          instance_type: "{{ instance_type }}"
          region: "{{ region }}"
          vpc_subnet_id: "{{ vpc_subnet }}"
          assign_public_ip: yes
          # id: "{{ id_master }}"
          instance_tags:
            Name: "{{ id_master }}"
          wait: true
          count: 1

      - name: Provision worker instance
        ec2:
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          key_name: "{{ key_name }}"
          group_id: "{{ result_sec_group_worker.group_id }}"
          image: "{{ image }}"
          instance_type: "{{ instance_type }}"
          region: "{{ region }}"
          vpc_subnet_id: "{{ vpc_subnet }}"
          wait: true
          assign_public_ip: yes
          # id: "{{ id_worker }}"
          instance_tags:
            Name: "{{ id_worker }}"
          count: 2

      tags: ['never', 'create_ec2']

    - name: Create hosts file
      block:
      - name: Facts of the master
        ec2_instance_info:
          filters:
            "tag:Name": "{{ id_master }}"
        register: result
      - lineinfile:
          path: {{ hosts_path }}
          line: "[masters]"
          create: yes
      - lineinfile:
          path: {{ hosts_path }}
          line: "{{ item.tags.Name }} ansible_host={{ item.public_ip_address }} ansible_user=ubuntu"
        loop: "{{ result.instances }}"

      - name: Facts of workers
        ec2_instance_info:
          filters:
            "tag:Name": "{{ id_worker }}"
        register: result
      - lineinfile:
          path: {{ hosts_path }}
          line: "[workers]"
      - lineinfile:
          path: {{ hosts_path }}
          line: "{{ item.tags.Name }}{{ index }} ansible_host={{ item.public_ip_address }} ansible_user=ubuntu"
        loop: "{{ result.instances|flatten(levels=1) }}"
        loop_control:
          index_var: index
      - blockinfile:
          path: {{ hosts_path }}
          block: |
            [all:vars]
            ansible_python_interpreter=/usr/bin/python3

      tags: 'instance_info'